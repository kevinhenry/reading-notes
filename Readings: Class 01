# Class 1 Readings: Topic

Below you will find some reading material, code samples, and some additional resources that support todayâ€™s topic and the upcoming lecture.

Review the Submission Instructions for guidance on completing and submitting this assignment.

## Reading
[Pain and Suffering](https://codefellows.github.io/code-401-python-guide/curriculum/class-01/notes/pain_suffering)

This was no Lou Holtz pep talk, but oh well!

"But pain in the service of growth is a good thing, as long as that pain is what's necessary to achieve the growth that you're aiming for."


"Suffering is pain without purpose. Pain with no higher goal. Pain with no dreams, no ambition, no aspiration.

"Suffering is dependent ont he story that we layer on top of our pain"

1. What's my perspective?
2. Why am I doing this?
3. I want what comes at the end of this journey.
4. I am doing this for and my family.

[Beginners Guide to Big O](https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/)

Big O notation is used in CS to describe the performance or complexity of an algorithm. It specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (memory on a disk) by the algorithm.

### O(1) - algorithm that will always execute in the same time(or space) regardless of the size of the input data set.

```
bool IsFirstElementNull(IList<String> elements)
{
    return elements[0] == null;
}
```

### O(N) - algorithm whose performance will grow linearly and in direct proportion to the size of the input data set.

```
bool ContainsValue(IEnumerable<string> elements, string value)
{
    foreach (var element in elements)
    {
        if (element == value) return true; 
    }     
    return false; 
}
```

### O(N**2) - algorithm whose performance is directly proportional to the square of the size of the input data set. Deeper nested iterations will result in O(N**3), O(N**4) etc,

```
bool ContainsDuplicates(IList<string> elements)
{
    for (var outer = 0; outer < elements.Count; outer++) 
    {
        for (var inner = 0; inner < elements.Count; inner++) 
        { 
            // Don't compare with self 
            if (outer == inner) continue;             
            
            if (elements[outer] == elements[inner]) return true; 
        }
    }    
    return false;
}
```

### O(2^N) - algorithm whose growth doubles with each additional to the input data set. The growth curve of an O(2^N) fuction is exponential - starting off very shallow, then rising meteorically. An example is the recursive calculation of Fibonacci numbers:

```
int Fibonacci(int number)
{
    if (number <= 1) return number;
       
    return Fibonacci(number - 2) + Fibonacci(number - 1); 
}
```

### Logarithms... I need to learn more about these or at least find a better explaination...

O(log N) - iterative halving of data sets that produces a growth curve peaking at the beginning and slowly flattening out as the size of data sets increase.

## Additional Resources
[Season 1, Episode 6, A friendly intro to Big O Notation](https://www.codenewbie.org/basecs/8)

### Videos
[Names and Values in Python](https://www.youtube.com/watch?v=_AEJHKGk9ns)

### Bookmark/Skim
[Awesome Python Environment](https://towardsdatascience.com/how-to-setup-an-awesome-python-environment-for-data-science-or-anything-else-35d358cc95d5)
[Python Module of the Week](https://pymotw.com/3/index.html)
