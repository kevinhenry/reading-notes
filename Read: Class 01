# Read: Class 01 - Readings: Introduction to React and Components

# [React Tutorial through ‘Passing Data Through Props’](https://reactjs.org/tutorial/tutorial.html)

REACT is a JavaScript library for building user interfaces

Components - small and isolated pieces of code used in React to write complex UIs -- we used components to tell React what we want to see on the screen. When data changes, React will update and re-render components.

`Props`- components takes in parameters called props

`render` - method to return what you want to see on the screen

`JSX` - special syntax used to write render structures

Passing props is how info flows in React apps, from parents to children

State used to "remember" things

- `this.state` set in constructors -- private to the component it is defined in

# [React Docs - hello world](https://reactjs.org/docs/hello-world.html)

Building blocks of React apps: elements and components

The smallest React example

```
ReactDOM.render(
  <h1>Hello, world!</h1>,
  document.getElementById('root')
);
```

# [React Docs - introducing JSX](https://reactjs.org/docs/introducing-jsx.html)

JSX is a syntax extension to JavaScript

JSX produces React "elements"

JSX isn't required but it is helpful when needing a visual aid when working with UI inside of JavaScript code

JSX allows React to show more useful error and warning messages

Example code
```
const name = 'Josh Perez';
const element = <h1>Hello, {name}</h1>;

ReactDOM.render(
  element,
  document.getElementById('root')
);
```

Any valid JavaScript expressions can be put inside curly braces in JSX
- curly braces for expressions
- quotes for string values

JSX is an expression too and can be used in function calls and objects
- can be used inside of `if` statements and `for` loops

JSX tags can contain children like `li` in an `ul`

JSX can also represent Objects using the `React.createElement();`

# [React Docs - rendering elements](https://reactjs.org/docs/rendering-elements.html)

Elements are the smallest building blocks of React apps.

Element describes what you want to see on the screen

DOM nodes get an id of "root" because everything inside it will be managed by React DOM

To render a React element to the root DOM, pass both to `ReactDom.render();`

```
const element = <h1>Hello!</h1>;
ReactDOM.render(element, document.getElementById('root'));
```

Elements are immutable. Once you create an element, you can't change its children or attributes.

To update the UI, create a new element and pass it to ReactDOM.render().

# [React Docs - Components and props](https://reactjs.org/docs/components-and-props.html)

Conceptually components are like JavaScript functions

- Accept parameters called props
- Return React elements describing what should appear on the screen

### Function and Class Components

Simplest way to define a component is writing a JavaScript function

Example Code
```
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
```


## Rendering a Component

Example Code

```
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name="Sara" />
ReactDOM.render(
  element,
  document.getElementById('root')
);
```

Recap

1. `ReactDom.render()` is called with the `<Welcome name="Sara" />` element
2. React calls the Welcome component with {name: 'Sara'} as the props
3. Welcome component returns `<h1>Hello, Sara</h1>` element as the result
4. React DOM updates the DOM to match `<h1>Hello, Sara</h1>`

NOTE: Always start component names with a capital letter

## Composing Components
Components can refer to others in their output and the same component abstraction can be used for any level of detail

## Extracting components
A good rule of thumb is to extract components or splitting them into smaller components
for example: if used several times or complex enough on its own

## Props are Read-Only
